package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Scan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCAN.
*/
public class ScanDao extends AbstractDao<Scan, Long> {

    public static final String TABLENAME = "SCAN";

    /**
     * Properties of entity Scan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NetID = new Property(1, String.class, "NetID", false, "NET_ID");
        public final static Property Attendance = new Property(2, Integer.class, "Attendance", false, "ATTENDANCE");
        public final static Property ScanTime = new Property(3, String.class, "ScanTime", false, "SCAN_TIME");
        public final static Property ScanDate = new Property(4, String.class, "ScanDate", false, "SCAN_DATE");
        public final static Property Week = new Property(5, Integer.class, "Week", false, "WEEK");
    };


    public ScanDao(DaoConfig config) {
        super(config);
    }
    
    public ScanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCAN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NET_ID' TEXT," + // 1: NetID
                "'ATTENDANCE' INTEGER," + // 2: Attendance
                "'SCAN_TIME' TEXT," + // 3: ScanTime
                "'SCAN_DATE' TEXT," + // 4: ScanDate
                "'WEEK' INTEGER);"); // 5: Week
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Scan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NetID = entity.getNetID();
        if (NetID != null) {
            stmt.bindString(2, NetID);
        }
 
        Integer Attendance = entity.getAttendance();
        if (Attendance != null) {
            stmt.bindLong(3, Attendance);
        }
 
        String ScanTime = entity.getScanTime();
        if (ScanTime != null) {
            stmt.bindString(4, ScanTime);
        }
 
        String ScanDate = entity.getScanDate();
        if (ScanDate != null) {
            stmt.bindString(5, ScanDate);
        }
 
        Integer Week = entity.getWeek();
        if (Week != null) {
            stmt.bindLong(6, Week);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Scan readEntity(Cursor cursor, int offset) {
        Scan entity = new Scan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NetID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Attendance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ScanTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ScanDate
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Week
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Scan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNetID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttendance(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setScanTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScanDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeek(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Scan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Scan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
